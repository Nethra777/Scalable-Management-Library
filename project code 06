from flask import Flask, request, jsonify, Blueprint
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_cors import CORS
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from marshmallow import Schema, fields, ValidationError
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import logging
import datetime

# Initialize Flask App
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'supersecretkey'  # Change in production!

# Initialize Extensions
db = SQLAlchemy(app)
migrate = Migrate(app, db)
CORS(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)
limiter = Limiter(get_remote_address, app=app, default_limits=["10 per minute"])

# Configure Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# User Blueprint
user_bp = Blueprint('user', __name__)

# User Model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(10), default='user')  # 'admin' or 'user'

# Blacklist for JWT tokens
blacklist = set()

# Schema for Input Validation
class UserSchema(Schema):
    username = fields.String(required=True, validate=lambda x: len(x) > 0)
    email = fields.Email(required=True)
    password = fields.String(required=True, validate=lambda x: len(x) > 5)
    role = fields.String()

user_schema = UserSchema()

# User Registration Route
@user_bp.route('/register', methods=['POST'])
def register():
    try:
        data = user_schema.load(request.get_json())  # Validate input
        if User.query.filter_by(username=data['username']).first():
            return jsonify({'error': 'Username already exists'}), 409
        if User.query.filter_by(email=data['email']).first():
            return jsonify({'error': 'Email already exists'}), 409

        hashed_password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
        new_user = User(username=data['username'], email=data['email'], password=hashed_password, role=data.get('role', 'user'))
        db.session.add(new_user)
        db.session.commit()
        logger.info(f"User {data['username']} registered successfully")
        return jsonify({'message': 'User registered successfully'}), 201
    except ValidationError as err:
        return jsonify({'error': err.messages}), 400
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error registering user: {str(e)}")
        return jsonify({'error': 'Database error'}), 500

# User Login Route with Rate Limiting
@user_bp.route('/login', methods=['POST'])
@limiter.limit("5 per minute")
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data.get('username')).first()
    if not user or not bcrypt.check_password_hash(user.password, data.get('password')):
        return jsonify({'error': 'Invalid credentials'}), 401

    access_token = create_access_token(identity={'username': user.username, 'role': user.role}, expires_delta=datetime.timedelta(hours=1))
    return jsonify({'token': access_token, 'message': 'Login successful'}), 200

# Logout Route
@user_bp.route('/logout', methods=['POST'])
@jwt_required()
def logout():
    jti = get_jwt_identity()
    blacklist.add(jti)
    return jsonify({'message': 'Logged out successfully'}), 200

# Token Revocation Check
@jwt.token_in_blocklist_loader
def check_if_token_revoked(jwt_header, jwt_payload):
    return jwt_payload['jti'] in blacklist

# Update User Profile
@user_bp.route('/update_profile', methods=['PUT'])
@jwt_required()
def update_profile():
    current_user = get_jwt_identity()
    user = User.query.filter_by(username=current_user['username']).first()
    if not user:
        return jsonify({'error': 'User not found'}), 404

    data = request.get_json()
    if 'username' in data:
        user.username = data['username']
    if 'email' in data:
        user.email = data['email']
    if 'password' in data:
        user.password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    
    db.session.commit()
    return jsonify({'message': 'Profile updated successfully'}), 200

# Admin Update User Role
@user_bp.route('/update_role/<int:user_id>', methods=['PUT'])
@jwt_required()
def update_role(user_id):
    current_user = get_jwt_identity()
    if current_user['role'] != 'admin':
        return jsonify({'error': 'Access denied'}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404

    data = request.get_json()
    if 'role' in data and data['role'] in ['admin', 'user']:
        user.role = data['role']
        db.session.commit()
        return jsonify({'message': 'User role updated successfully'}), 200
    
    return jsonify({'error': 'Invalid role'}), 400

# Register Blueprint
app.register_blueprint(user_bp, url_prefix='/users')

if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Ensure tables are created
    app.run(debug=True)
